{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/ContactForm/ContactForm.js","components/Contact/Contact.js","components/ContactList/ContactList.js","components/Filter/Filter.js","components/Notification/Notification.js","App.js","index.js","components/Contact/Contact.module.css","components/Filter/Filter.module.css"],"names":["module","exports","ContactForm","state","name","number","handleChange","e","currentTarget","value","setState","submitNewContact","preventDefault","props","addNewContact","clearForm","onSubmit","this","className","s","form","label","htmlFor","input","type","id","pattern","title","required","onChange","Component","Contact","deleteFunction","listItem","listBtn","onClick","ContactList","contactsList","deleteContactBtn","contacts","map","Filter","updateFilterFunc","Notification","msg","App","filter","saveContactsToLocalStorage","localStorage","setItem","JSON","stringify","current","find","el","nanoid","alert","deleteContact","updateFilter","getFilteredContacs","toLowerCase","includes","loadedFromLocal","loadContactsFromLocalStorage","parse","getItem","contactsToShow","length","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.76f0f521.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__2-s9E\",\"label\":\"ContactForm_label__1-Wgl\",\"input\":\"ContactForm_input__1FbxL\"};","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport s from \"./ContactForm.module.css\";\r\n\r\nclass ContactForm extends Component {\r\n  state = {\r\n    name: \"\",\r\n    number: \"\",\r\n  };\r\n\r\n  static propTypes = {\r\n    addNewContact: PropTypes.func.isRequired,\r\n  };\r\n\r\n  handleChange = (e) => {\r\n    const { name, value } = e.currentTarget;\r\n    this.setState(() => ({ [name]: value }));\r\n  };\r\n\r\n  submitNewContact = (e) => {\r\n    e.preventDefault();\r\n    const { name, number } = this.state;\r\n    this.props.addNewContact(name, number);\r\n    this.clearForm();\r\n  };\r\n\r\n  clearForm = () => {\r\n    this.setState(() => ({ name: \"\", number: \"\" }));\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.submitNewContact} className={s.form}>\r\n        <label className={s.label} htmlFor=\"name\">\r\n          Name\r\n        </label>\r\n        <input\r\n          className={s.input}\r\n          type=\"text\"\r\n          name=\"name\"\r\n          id=\"name\"\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\r\n          required\r\n          value={this.state.name}\r\n          onChange={this.handleChange}\r\n        />\r\n        <label className={s.label} htmlFor=\"number\">\r\n          Number\r\n        </label>\r\n        <input\r\n          className={s.input}\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          id=\"number\"\r\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\r\n          required\r\n          value={this.state.number}\r\n          onChange={this.handleChange}\r\n        />\r\n\r\n        <button type=\"submit\">Add contact</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ContactForm;\r\n","import PropTypes from \"prop-types\";\r\nimport s from \"./Contact.module.css\";\r\n\r\nfunction Contact({ id, name, number, deleteFunction }) {\r\n  return (\r\n    <li className={s.listItem}>\r\n      <p>{`${name}: ${number}`}</p>\r\n      <button\r\n        className={s.listBtn}\r\n        onClick={() => {\r\n          deleteFunction(id);\r\n        }}\r\n      >\r\n        Delete\r\n      </button>\r\n    </li>\r\n  );\r\n}\r\n\r\nContact.propTypes = {\r\n  id: PropTypes.string.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  number: PropTypes.string.isRequired,\r\n  deleteFunction: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Contact;\r\n","import Contact from \"../Contact\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nfunction ContactList({ contactsList, deleteContactBtn }) {\r\n  const contacts = contactsList.map(({ id, name, number }) => (\r\n    <Contact\r\n      key={id}\r\n      id={id}\r\n      name={name}\r\n      number={number}\r\n      deleteFunction={deleteContactBtn}\r\n    />\r\n  ));\r\n\r\n  return <ul>{contacts}</ul>;\r\n}\r\n\r\nContactList.propTypes = {\r\n  contactsList: PropTypes.arrayOf(\r\n    PropTypes.exact({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    })\r\n  ),\r\n  deleteContactBtn: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactList;\r\n","import PropTypes from \"prop-types\";\r\nimport s from \"./Filter.module.css\";\r\n\r\nfunction Filter({ value, updateFilterFunc }) {\r\n  return (\r\n    <>\r\n      <label className={s.label} htmlFor=\"filter\">\r\n        Find contacts by name\r\n      </label>\r\n      <input\r\n        className={s.input}\r\n        id=\"filter\"\r\n        value={value}\r\n        onChange={updateFilterFunc}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string.isRequired,\r\n  updateFilterFunc: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Filter;\r\n","function Notification({ msg }) {\r\n  return <p>{msg}</p>;\r\n}\r\n\r\nexport default Notification;\r\n","import \"./App.css\";\r\nimport React, { Component } from \"react\";\r\nimport ContactForm from \"./components/ContactForm\";\r\nimport ContactList from \"./components/ContactList\";\r\nimport Filter from \"./components/Filter\";\r\nimport Notification from \"./components/Notification\";\r\nimport { nanoid } from \"nanoid\";\r\n\r\nclass App extends Component {\r\n  state = {\r\n    contacts: [],\r\n    filter: \"\",\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.setState(() => {\r\n      const loadedFromLocal = this.loadContactsFromLocalStorage();\r\n      return { contacts: [...loadedFromLocal] };\r\n    });\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    this.saveContactsToLocalStorage();\r\n  }\r\n\r\n  loadContactsFromLocalStorage() {\r\n    return JSON.parse(localStorage.getItem(\"contacts\"));\r\n  }\r\n  saveContactsToLocalStorage = () => {\r\n    const { contacts } = this.state;\r\n    localStorage.setItem(\"contacts\", JSON.stringify(contacts));\r\n  };\r\n\r\n  addNewContact = (name, number) => {\r\n    this.setState((current) => {\r\n      const { contacts } = current;\r\n      if (contacts.find((el) => el.name === name)) {\r\n        alert(`${name} is already in contacts.`);\r\n        return;\r\n      }\r\n      return {\r\n        contacts: [...contacts, { id: nanoid(), name, number }],\r\n      };\r\n    });\r\n  };\r\n\r\n  deleteContact = (id) => {\r\n    this.setState((current) => ({\r\n      contacts: current.contacts.filter((el) => el.id !== id),\r\n    }));\r\n  };\r\n\r\n  updateFilter = (e) => {\r\n    const value = e.currentTarget.value;\r\n\r\n    this.setState({ filter: value });\r\n  };\r\n\r\n  getFilteredContacs = () => {\r\n    const { contacts, filter } = this.state;\r\n\r\n    return contacts.filter((e) => {\r\n      return e.name.toLowerCase().includes(filter.toLowerCase());\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const contactsToShow = this.getFilteredContacs();\r\n    const { filter } = this.state;\r\n\r\n    return (\r\n      <>\r\n        <h1>Phonebook</h1>\r\n        <ContactForm addNewContact={this.addNewContact} />\r\n        <h2>Contacts</h2>\r\n        {contactsToShow.length ? (\r\n          <>\r\n            <Filter value={filter} updateFilterFunc={this.updateFilter} />\r\n            <ContactList\r\n              contactsList={contactsToShow}\r\n              deleteContactBtn={this.deleteContact}\r\n            />\r\n          </>\r\n        ) : (\r\n          <Notification msg={\"You seem not to have added any contacts yet!\"} />\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"listItem\":\"Contact_listItem__1h_tY\",\"listBtn\":\"Contact_listBtn__2NkiL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__1UDEu\",\"input\":\"Filter_input__3ZZ1a\"};"],"sourceRoot":""}